# Code generated by d2a (https://github.com/walkframe/d2a).
# `manage.py sqla_codegen` at Mon Jun 26 07:58:43 2023 UTC.


from importlib import import_module

import sqlalchemy as sa
from sqlalchemy import types as default_types
from sqlalchemy.dialects import (
    postgresql as postgresql_types,
    mysql as mysql_types,
    oracle as oracle_types,
)
from sqlalchemy.ext.declarative import declarative_base
try:
    from geoalchemy2 import types as geotypes
except ImportError:
    pass



Base = declarative_base()


class CIText(default_types.String):
    '''DO NOT DELETE THIS CLASS'''
    __visit_name__ = 'CITEXT'


def GET_DEFAULT(path):
    '''DO NOT DELETE THIS FUNCTION'''

    module_path, model_name, field_name = path.rsplit(".", 2)
    try:
        module = import_module(module_path)
        model = getattr(module, model_name)
    except (ImportError, AttributeError):
        return None

    for field in model._meta.fields:
        if field.name == field_name:
            return field.default






class BlacklistedToken(Base):
    __tablename__ = 'token_blacklist_blacklistedtoken'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    token_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="token_blacklist_outstandingtoken.id", ondelete="CASCADE"),
        primary_key=False,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    blacklisted_at = sa.Column(
        default_types.DATETIME(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    token = sa.orm.relationship(
        'OutstandingToken',
        foreign_keys="[token_blacklist_blacklistedtoken.c.token_id]",
        remote_side=None,
        uselist=False,
    )


class OutstandingToken(Base):
    __tablename__ = 'token_blacklist_outstandingtoken'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="custom_user_user.id", ondelete="SET_NULL"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    jti = sa.Column(
        postgresql_types.VARCHAR(length=255),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    token = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    created_at = sa.Column(
        default_types.DATETIME(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    expires_at = sa.Column(
        default_types.DATETIME(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[token_blacklist_outstandingtoken.c.user_id]",
        remote_side=None,
    )


class ContentType(Base):
    __tablename__ = 'django_content_type'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    app_label = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    model = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class LogEntry(Base):
    __tablename__ = 'django_admin_log'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    action_time = sa.Column(
        default_types.DATETIME(),
        default=GET_DEFAULT('django.contrib.admin.models.LogEntry.action_time'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="custom_user_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    content_type_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="django_content_type.id", ondelete="SET_NULL"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    object_id = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    object_repr = sa.Column(
        postgresql_types.VARCHAR(length=200),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    action_flag = sa.Column(
        postgresql_types.SMALLINT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    change_message = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[django_admin_log.c.user_id]",
        remote_side=None,
    )
    content_type = sa.orm.relationship(
        'ContentType',
        foreign_keys="[django_admin_log.c.content_type_id]",
        remote_side=None,
    )


class GroupPermissions(Base):
    __tablename__ = 'auth_group_permissions'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    group_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_group.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    permission_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_permission.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    group = sa.orm.relationship(
        'Group',
        foreign_keys="[auth_group_permissions.c.group_id]",
        remote_side=None,
    )
    permission = sa.orm.relationship(
        'Permission',
        foreign_keys="[auth_group_permissions.c.permission_id]",
        remote_side=None,
    )


class Group(Base):
    __tablename__ = 'auth_group'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    permissions = sa.orm.relationship(
        'Permission',
        secondary="auth_group_permissions",
        foreign_keys="[auth_group_permissions.c.group_id, auth_group_permissions.c.permission_id]",
        remote_side=None,
    )


class Permission(Base):
    __tablename__ = 'auth_permission'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=255),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    content_type_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="django_content_type.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    codename = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    content_type = sa.orm.relationship(
        'ContentType',
        foreign_keys="[auth_permission.c.content_type_id]",
        remote_side=None,
    )


class User(Base):
    __tablename__ = 'auth_user'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    password = sa.Column(
        postgresql_types.VARCHAR(length=128),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    last_login = sa.Column(
        default_types.DATETIME(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    is_superuser = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('django.contrib.auth.models.User.is_superuser'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    username = sa.Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    first_name = sa.Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    last_name = sa.Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    email = sa.Column(
        postgresql_types.VARCHAR(length=254),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    is_staff = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('django.contrib.auth.models.User.is_staff'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    is_active = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('django.contrib.auth.models.User.is_active'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    date_joined = sa.Column(
        default_types.DATETIME(),
        default=GET_DEFAULT('django.contrib.auth.models.User.date_joined'),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class Session(Base):
    __tablename__ = 'django_session'
    
    session_key = sa.Column(
        postgresql_types.VARCHAR(length=40),
        primary_key=True,
        unique=True,
        nullable=False,
    )
    session_data = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    expire_date = sa.Column(
        default_types.DATETIME(),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class UserGroups(Base):
    __tablename__ = 'custom_user_user_groups'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="custom_user_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    group_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_group.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[custom_user_user_groups.c.user_id]",
        remote_side=None,
    )
    group = sa.orm.relationship(
        'Group',
        foreign_keys="[custom_user_user_groups.c.group_id]",
        remote_side=None,
    )


class UserUserPermissions(Base):
    __tablename__ = 'custom_user_user_user_permissions'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="custom_user_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    permission_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_permission.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[custom_user_user_user_permissions.c.user_id]",
        remote_side=None,
    )
    permission = sa.orm.relationship(
        'Permission',
        foreign_keys="[custom_user_user_user_permissions.c.permission_id]",
        remote_side=None,
    )


class Course(Base):
    __tablename__ = 'course_course'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    code = sa.Column(
        postgresql_types.VARCHAR(length=10),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    description = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    level_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="course_level.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    level = sa.orm.relationship(
        'Level',
        foreign_keys="[course_course.c.level_id]",
        remote_side=None,
    )


class PasswordReset(Base):
    __tablename__ = 'student_profile_password_reset'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="custom_user_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    otp = sa.Column(
        postgresql_types.VARCHAR(length=8),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    verified = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('student_profile.models.PasswordReset.verified'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    created_at = sa.Column(
        default_types.DATETIME(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    expiry = sa.Column(
        default_types.DATETIME(),
        default=GET_DEFAULT('student_profile.models.PasswordReset.expiry'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[student_profile_password_reset.c.user_id]",
        remote_side=None,
    )


class StudentProfileCourses(Base):
    __tablename__ = 'student_profile_student_profile_courses'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    student_profile_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="student_profile_student_profile.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    course_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="course_course.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    student_profile = sa.orm.relationship(
        'Student_Profile',
        foreign_keys="[student_profile_student_profile_courses.c.student_profile_id]",
        remote_side=None,
    )
    course = sa.orm.relationship(
        'Course',
        foreign_keys="[student_profile_student_profile_courses.c.course_id]",
        remote_side=None,
    )


class StudentProfile(Base):
    __tablename__ = 'student_profile_student_profile'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="custom_user_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    username = sa.Column(
        postgresql_types.VARCHAR(length=32),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    dp = sa.Column(
        postgresql_types.VARCHAR(length=200),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    bio = sa.Column(
        postgresql_types.TEXT(),
        default=GET_DEFAULT('student_profile.models.StudentProfile.bio'),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    created_at = sa.Column(
        default_types.DATETIME(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    updated_at = sa.Column(
        default_types.DATETIME(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[student_profile_student_profile.c.user_id]",
        remote_side=None,
    )
    courses = sa.orm.relationship(
        'Course',
        secondary="student_profile_student_profile_courses",
        foreign_keys="[student_profile_student_profile_courses.c.student_profile_id, student_profile_student_profile_courses.c.course_id]",
        remote_side=None,
    )


class Choice(Base):
    __tablename__ = 'qp_choice'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    related_question_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="qp_question.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    choice = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    img = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    is_correct = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('qp.models.Choice.is_correct'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    related_question = sa.orm.relationship(
        'Question',
        foreign_keys="[qp_choice.c.related_question_id]",
        remote_side=None,
    )


class QPFile(Base):
    __tablename__ = 'qp_qpfile'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    course_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="course_course.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    file = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    uploaded_at = sa.Column(
        default_types.DATETIME(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="custom_user_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    course = sa.orm.relationship(
        'Course',
        foreign_keys="[qp_qpfile.c.course_id]",
        remote_side=None,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[qp_qpfile.c.user_id]",
        remote_side=None,
    )


class QuestionChoices(Base):
    __tablename__ = 'qp_question_choices'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    question_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="qp_question.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    choice_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="qp_choice.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    question = sa.orm.relationship(
        'Question',
        foreign_keys="[qp_question_choices.c.question_id]",
        remote_side=None,
    )
    choice = sa.orm.relationship(
        'Choice',
        foreign_keys="[qp_question_choices.c.choice_id]",
        remote_side=None,
    )


class Question(Base):
    __tablename__ = 'qp_question'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    question_paper_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="qp_questionpaper.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    type = sa.Column(
        postgresql_types.VARCHAR(length=10),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    text = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    img = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    marks = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    num_min = sa.Column(
        default_types.DECIMAL(precision=10, scale=2),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    num_max = sa.Column(
        default_types.DECIMAL(precision=10, scale=2),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    text_answer = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    question_paper = sa.orm.relationship(
        'QuestionPaper',
        foreign_keys="[qp_question.c.question_paper_id]",
        remote_side=None,
    )
    choices = sa.orm.relationship(
        'Choice',
        secondary="qp_question_choices",
        foreign_keys="[qp_question_choices.c.question_id, qp_question_choices.c.choice_id]",
        remote_side=None,
    )


class QuestionPaperQuestions(Base):
    __tablename__ = 'qp_questionpaper_questions'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    questionpaper_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="qp_questionpaper.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    question_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="qp_question.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    questionpaper = sa.orm.relationship(
        'QuestionPaper',
        foreign_keys="[qp_questionpaper_questions.c.questionpaper_id]",
        remote_side=None,
    )
    question = sa.orm.relationship(
        'Question',
        foreign_keys="[qp_questionpaper_questions.c.question_id]",
        remote_side=None,
    )


class QuestionPaper(Base):
    __tablename__ = 'qp_questionpaper'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    course_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="course_course.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=300),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    type = sa.Column(
        postgresql_types.VARCHAR(length=10),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    course = sa.orm.relationship(
        'Course',
        foreign_keys="[qp_questionpaper.c.course_id]",
        remote_side=None,
    )
    questions = sa.orm.relationship(
        'Question',
        secondary="qp_questionpaper_questions",
        foreign_keys="[qp_questionpaper_questions.c.questionpaper_id, qp_questionpaper_questions.c.question_id]",
        remote_side=None,
    )


class Level(Base):
    __tablename__ = 'course_level'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class TestPaperTestQuestions(Base):
    __tablename__ = 'test_paper_testpaper_test_questions'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    testpaper_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="test_paper_testpaper.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    testquestion_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="test_paper_testquestion.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    testpaper = sa.orm.relationship(
        'TestPaper',
        foreign_keys="[test_paper_testpaper_test_questions.c.testpaper_id]",
        remote_side=None,
    )
    testquestion = sa.orm.relationship(
        'TestQuestion',
        foreign_keys="[test_paper_testpaper_test_questions.c.testquestion_id]",
        remote_side=None,
    )


class TestPaper(Base):
    __tablename__ = 'test_paper_testpaper'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    question_paper_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="qp_questionpaper.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="custom_user_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    score = sa.Column(
        default_types.DECIMAL(precision=5, scale=2),
        default=GET_DEFAULT('test_paper.models.TestPaper.score'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    time_spent = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    submitted = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('test_paper.models.TestPaper.submitted'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    question_paper = sa.orm.relationship(
        'QuestionPaper',
        foreign_keys="[test_paper_testpaper.c.question_paper_id]",
        remote_side=None,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[test_paper_testpaper.c.user_id]",
        remote_side=None,
    )
    test_questions = sa.orm.relationship(
        'TestQuestion',
        secondary="test_paper_testpaper_test_questions",
        foreign_keys="[test_paper_testpaper_test_questions.c.testpaper_id, test_paper_testpaper_test_questions.c.testquestion_id]",
        remote_side=None,
    )


class TestQuestionChoices(Base):
    __tablename__ = 'test_paper_testquestion_choices'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    testquestion_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="test_paper_testquestion.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    choice_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="qp_choice.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    testquestion = sa.orm.relationship(
        'TestQuestion',
        foreign_keys="[test_paper_testquestion_choices.c.testquestion_id]",
        remote_side=None,
    )
    choice = sa.orm.relationship(
        'Choice',
        foreign_keys="[test_paper_testquestion_choices.c.choice_id]",
        remote_side=None,
    )


class TestQuestionUserChoices(Base):
    __tablename__ = 'test_paper_testquestion_user_choices'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    testquestion_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="test_paper_testquestion.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    choice_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="qp_choice.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    testquestion = sa.orm.relationship(
        'TestQuestion',
        foreign_keys="[test_paper_testquestion_user_choices.c.testquestion_id]",
        remote_side=None,
    )
    choice = sa.orm.relationship(
        'Choice',
        foreign_keys="[test_paper_testquestion_user_choices.c.choice_id]",
        remote_side=None,
    )


class TestQuestion(Base):
    __tablename__ = 'test_paper_testquestion'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    test_paper_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="test_paper_testpaper.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    question_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="qp_question.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    type = sa.Column(
        postgresql_types.VARCHAR(length=10),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    marks = sa.Column(
        default_types.DECIMAL(precision=5, scale=2),
        default=GET_DEFAULT('test_paper.models.TestQuestion.marks'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    score = sa.Column(
        default_types.DECIMAL(precision=5, scale=2),
        default=GET_DEFAULT('test_paper.models.TestQuestion.score'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    num_min = sa.Column(
        default_types.DECIMAL(precision=10, scale=2),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    num_max = sa.Column(
        default_types.DECIMAL(precision=10, scale=2),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    text_answer = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    time_spent = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    user_text_answer = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    user_num_answer = sa.Column(
        default_types.DECIMAL(precision=10, scale=2),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    submitted = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('test_paper.models.TestQuestion.submitted'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    test_paper = sa.orm.relationship(
        'TestPaper',
        foreign_keys="[test_paper_testquestion.c.test_paper_id]",
        remote_side=None,
    )
    question = sa.orm.relationship(
        'Question',
        foreign_keys="[test_paper_testquestion.c.question_id]",
        remote_side=None,
    )
    choices = sa.orm.relationship(
        'Choice',
        secondary="test_paper_testquestion_choices",
        foreign_keys="[test_paper_testquestion_choices.c.testquestion_id, test_paper_testquestion_choices.c.choice_id]",
        remote_side=None,
    )
    user_choices = sa.orm.relationship(
        'Choice',
        secondary="test_paper_testquestion_user_choices",
        foreign_keys="[test_paper_testquestion_user_choices.c.testquestion_id, test_paper_testquestion_user_choices.c.choice_id]",
        remote_side=None,
    )



